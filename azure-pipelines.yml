trigger:
  # What branches will trigger a build?
  branches:
    include:
      # Any Pull Request merging into the master branch
      - master

stages:
- stage: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        'Windows':
          VM_IMAGE: 'windows-latest'
        'Linux':
          VM_IMAGE: 'ubuntu-latest'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    # Install the prereqs
    - template: build/common-steps.yml
    - script: dotnet gitversion /l console /output buildserver /nofetch
      displayName: Calculate GitVersion
      condition: eq(variables['Agent.OS'], 'Linux')

    # Build and test the project

    - pwsh: Get-ChildItem Env:GitVersion*
      displayName: List GitVersion variables
      env:
        GitVersion_Version: $(GitVersion_Version)
        GitVersion_PreReleaseTagWithDash: $(GitVersion_PreReleaseTagWithDash)

    - pwsh: Invoke-Psake -buildFile .\Build.ps1 -taskList build, test
      displayName: "Run tests and coverage"

    # Publish code coverage to codecov.io for windows
    - script: codecov -f coverage.json -t $(CODECOV_TOKEN)
      displayName: Upload coverage to codecov.io
      condition: always()

    - publish: $(System.DefaultWorkingDirectory)
      displayName: Upload pipeline artifacts
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
      artifact: storage

- stage: Publish
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
  jobs:
  - job: Publish
    pool:
      vmImage: ubuntu-latest

    steps:
    # Install the prereqs
    - template: build/common-steps.yml
    - task: DownloadPipelineArtifact@2
      displayName: 'Download pipeline artifacts'
      inputs:
        source: current
        path: $(Build.SourcesDirectory)
        artifact: storage
    - pwsh: ./Invoke-Publish.ps1
      displayName: Publish to PowerShell Gallery
      condition: succeeded()
      env:
        GitVersion_Version: $(GitVersion_Version)
        GitVersion_PreReleaseTagWithDash: $(GitVersion_PreReleaseTagWithDash)
        POWERSHELL_GALLERY_API_TOKEN: $(POWERSHELL_GALLERY_API_TOKEN)

    - pwsh: ./Notify-Slack.ps1
      displayName: Notify on Slack when successfully published
      condition: succeeded()
      env:
        GitVersion_Version: $(GitVersion_Version)
        GitVersion_PreReleaseTagWithDash: $(GitVersion_PreReleaseTagWithDash)
        SLACK_TOKEN: $(SLACK_TOKEN)
        SLACK_URL: $(SLACK_URL)
